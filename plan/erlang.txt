     Erlang coding conventions and server-side design decisions
    ------------------------------------------------------------


There are going to be a bunch of creatures and objects (actors?) in our world
that need to be referred to in multiple places (example: in the map and in the
connection object for a player). Pointers aren't exactly something you do in
functional programming, so here's what we'll do. For each of these things,
we'll create a thread (process?) to store the state, and then we'll pass the
PID around like a pointer. Anyone who wants to know anything about the object
will simply send the thread a message saying (for example) "hey, how many hit
points you got?", or "hey, got any pick-axes?" ("go fish.").

Message-passing is a nice synchronization primitive, but its biggest danger is
deadlock. Our code is going to be divided up into a bunch of different
processes sending messages in all directions. With some of those messages, the
sender will immediately block until a response is received. It's okay for two
processes to send messages to each other, but they can't both make such
"blocking requests" of each other as that introduces a possibility of deadlock.
In fact, as a general rule for server code, the (directed) graph of who makes
blocking requests to whom MUST NOT CONTAIN ANY DIRECTED CYCLES. To facilitate
this, the function spawned to create each process should specify which other
processes it makes blocking requests to.



     Miscellaneous notes about Erlang
    ----------------------------------


The inet library allows you to do various potentially useful things with
sockets. Examples include:
  * Automatically include a 1-, 2-, or 4-byte header with all packets:
        inet:setopts(Socket, {packet, ?HEADER_SIZE}).
  * Get the IP address of the machine on the other end of the socket (if, for
    example, we want to allow certain administrative privileges only to people
    logging in from certain whitelisted IP addresses):
        {ok, {Address, Port}} = inet:peername(Socket).



     Random remarks that look like they were written at Noodle Hour
    ----------------------------------------------------------------


Coding conventions? What are those?

Type safety? Yay, atoms!

How do you do ... in Erlang?
 * 2-dimensional arrays
 * File I/O

